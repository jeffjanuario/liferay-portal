/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.services.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.services.model.Estado;
import com.services.model.EstadoModel;
import com.services.model.EstadoSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Estado service. Represents a row in the &quot;Estado&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EstadoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EstadoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EstadoImpl
 * @generated
 */
@JSON(strict = true)
public class EstadoModelImpl
	extends BaseModelImpl<Estado> implements EstadoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a estado model instance should use the <code>Estado</code> interface instead.
	 */
	public static final String TABLE_NAME = "Estado";

	public static final Object[][] TABLE_COLUMNS = {
		{"estadoId", Types.BIGINT}, {"nome", Types.VARCHAR},
		{"uf", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("estadoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uf", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Estado (estadoId LONG not null primary key,nome VARCHAR(75) null,uf VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Estado";

	public static final String ORDER_BY_JPQL = " ORDER BY estado.estadoId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY Estado.estadoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Estado toModel(EstadoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Estado model = new EstadoImpl();

		model.setEstadoId(soapModel.getEstadoId());
		model.setNome(soapModel.getNome());
		model.setUf(soapModel.getUf());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Estado> toModels(EstadoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Estado> models = new ArrayList<Estado>(soapModels.length);

		for (EstadoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EstadoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _estadoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEstadoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _estadoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Estado.class;
	}

	@Override
	public String getModelClassName() {
		return Estado.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Estado, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Estado, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Estado, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Estado)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Estado, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Estado, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Estado)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Estado, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Estado, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Estado>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Estado.class.getClassLoader(), Estado.class, ModelWrapper.class);

		try {
			Constructor<Estado> constructor =
				(Constructor<Estado>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Estado, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Estado, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Estado, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Estado, Object>>();
		Map<String, BiConsumer<Estado, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Estado, ?>>();

		attributeGetterFunctions.put("estadoId", Estado::getEstadoId);
		attributeSetterBiConsumers.put(
			"estadoId", (BiConsumer<Estado, Long>)Estado::setEstadoId);
		attributeGetterFunctions.put("nome", Estado::getNome);
		attributeSetterBiConsumers.put(
			"nome", (BiConsumer<Estado, String>)Estado::setNome);
		attributeGetterFunctions.put("uf", Estado::getUf);
		attributeSetterBiConsumers.put(
			"uf", (BiConsumer<Estado, String>)Estado::setUf);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEstadoId() {
		return _estadoId;
	}

	@Override
	public void setEstadoId(long estadoId) {
		_estadoId = estadoId;
	}

	@JSON
	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_nome = nome;
	}

	@JSON
	@Override
	public String getUf() {
		if (_uf == null) {
			return "";
		}
		else {
			return _uf;
		}
	}

	@Override
	public void setUf(String uf) {
		_uf = uf;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Estado.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Estado toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Estado>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EstadoImpl estadoImpl = new EstadoImpl();

		estadoImpl.setEstadoId(getEstadoId());
		estadoImpl.setNome(getNome());
		estadoImpl.setUf(getUf());

		estadoImpl.resetOriginalValues();

		return estadoImpl;
	}

	@Override
	public int compareTo(Estado estado) {
		long primaryKey = estado.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Estado)) {
			return false;
		}

		Estado estado = (Estado)object;

		long primaryKey = estado.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Estado> toCacheModel() {
		EstadoCacheModel estadoCacheModel = new EstadoCacheModel();

		estadoCacheModel.estadoId = getEstadoId();

		estadoCacheModel.nome = getNome();

		String nome = estadoCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			estadoCacheModel.nome = null;
		}

		estadoCacheModel.uf = getUf();

		String uf = estadoCacheModel.uf;

		if ((uf != null) && (uf.length() == 0)) {
			estadoCacheModel.uf = null;
		}

		return estadoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Estado, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Estado, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Estado, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Estado)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Estado, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Estado, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Estado, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Estado)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Estado>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _estadoId;
	private String _nome;
	private String _uf;
	private Estado _escapedModel;

}